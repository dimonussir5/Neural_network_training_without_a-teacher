Эта программа реализует процесс обучения и оценки качества самоорганизующейся 
карты (SOM) на основе данных, сгенерированных изображениями трех
 различных классов: прямоугольников, кругов и треугольников. 

1. **Генерация данных изображений**: С помощью функции
 `generate_photo.genererate_pictures` создаются изображения
  с различными фигурами (прямоугольниками, кругами, треугольниками) 
  разного размера и расположения. 

2. **Подготовка данных**: Созданные изображения преобразуются 
в векторы признаков с помощью функции `generate_photo.images_to_data_vector`.
 Каждое изображение представляется в виде одномерного вектора, 
 содержащего значения яркости пикселей.

3. **Разделение данных**: Исходный набор данных разделяется 
на обучающий и тестовый наборы с помощью функции `train_test_split` 
из библиотеки `sklearn.model_selection`.

4. **Обучение SOM**: Для каждого варианта метода 
затухания (`'hill'` и `'linear'`) производится обучение
 SOM с помощью алгоритма обучения, реализованного в классе
  `SOM`. Обучение включает в себя инициализацию SOM, запуск
   нескольких эпох обучения с постепенным увеличением числа 
   эпох, а также подстройку весов SOM к обучающим данным. 
   После каждой эпохи вычисляется точность модели на тестовом наборе.

5. **Визуализация результатов обучения**: После завершения
 обучения для каждого варианта метода затухания создаются 
 графики, отображающие изменение точности модели в зависимости 
 от количества эпох. Также создаются графики, отображающие карту
  точек, плотность классов и карту расстояний SOM.

6. **Сравнение результатов**: На последнем этапе
 программа создает график, на котором перекрываются 
 кривые точности для обоих вариантов метода затухания.
  Это позволяет сравнить и оценить качество моделей,
   обученных с различными параметрами затухания.

   `'hill'` и `'linear'` - это параметры метода затухания, 
   которые могут использоваться при обучении самоорганизующейся 
   карты (SOM). Метод затухания определяет, каким образом
    изменяется скорость обучения SOM с увеличением числа эпох.

1. **'hill'** (гора): В этом методе скорость
 обучения сначала увеличивается с увеличением
  числа эпох до некоторого максимума, а затем
   постепенно уменьшается. Этот подход помогает
    ускорить начальные этапы обучения, а затем более медленно
     подстраивать веса SOM к данным, что может улучшить стабильность
      и сходимость алгоритма.

2. **'linear'** (линейный): В этом методе скорость обучения уменьшается
 линейно с увеличением числа эпох. Этот подход прост и предсказуем: 
 скорость обучения постепенно снижается с каждой эпохой, что может
  быть полезно для более стабильного и предсказуемого процесса обучения.

Выбор конкретного метода затухания зависит от характера 
данных и требуемых характеристик обучения SOM.



------------------------------------------------------------------
Эта программа является скриптом на языке Python,
 который реализует процесс обучения и оценки качества
  самоорганизующейся карты (SOM) на основе сгенерированных
   изображений трех различных классов: прямоугольников, 
   кругов и треугольников. Давайте рассмотрим её подробнее:

### Цель программы:
Цель программы - обучить SOM распознавать и классифицировать 
различные формы (прямоугольники, круги, треугольники) на
 основе сгенерированных изображений.

### Шаги программы:

1. **Генерация данных изображений**:
   - С использованием модуля `generate_photo` создаются изображения 
   с различными фигурами (прямоугольниками, кругами, треугольниками)
    разного размера и расположения.
   
2. **Подготовка данных**:
   - Созданные изображения преобразуются в векторы признаков,
    где каждое изображение представляется одномерным вектором,
     содержащим значения яркости пикселей.
   - Данные делятся на обучающий и тестовый наборы.

3. **Обучение SOM**:
   - Для каждого варианта метода затухания (hill и linear) выполняется обучение SOM:
     - Инициализация SOM.
     - Обучение SOM на обучающем наборе данных.
     - Вычисление точности модели на тестовом наборе данных.
     - Создание графиков, отображающих изменение точности модели в 
     зависимости от количества эпох обучения.

4. **Сравнение результатов**:
   - После завершения обучения для каждого метода 
   затухания создаются графики, на которых отображается
    изменение точности модели в зависимости от количества 
    эпох обучения.
   - Создается график, на котором перекрываются кривые
    точности для обоих методов затухания, чтобы сравнить качество моделей.

### Важные моменты:

- Программа использует библиотеку `matplotlib` для визуализации
 графиков и библиотеку `numpy` для работы с массивами данных.
- Методы затухания (`'hill'` и `'linear'`) управляют скоростью 
обучения SOM в процессе обучения.
- SOM представляет собой нейронную сеть без учителя, которая
 позволяет снижать размерность данных и кластеризовать их по сходству.
- Обученная SOM может использоваться для классификации новых
 данных, а также для визуализации структуры данных и выявления паттернов.